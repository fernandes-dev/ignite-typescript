generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  description String?
  created_at  DateTime? @default(now())
  updated_at  DateTime  @default(now())
  cars        cars[]
}

model specifications {
  id                  String                @id @default(uuid()) @db.Uuid
  name                String
  description         String?
  created_at          DateTime?             @default(now())
  updated_at          DateTime              @default(now())
  specifications_cars specifications_cars[]
}

model users {
  id             String    @id @default(uuid()) @db.Uuid
  name           String
  email          String    @unique
  password       String
  avatar         String?
  driver_license String
  is_admin       Boolean   @default(false)
  created_at     DateTime? @default(now())
  updated_at     DateTime  @default(now())
  rentals        rentals[]
}

model cars {
  id                  String                @id @default(uuid()) @db.Uuid
  name                String
  description         String
  daily_rate          Float
  available           Boolean               @default(true)
  license_plate       String
  fine_amount         Float
  brand               String
  category_id         String?               @db.Uuid
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now())
  category            categories?           @relation(fields: [category_id], references: [id], onUpdate: SetNull)
  specifications_cars specifications_cars[]
  car_images          car_images[]
  rentals             rentals[]
}

model specifications_cars {
  id                String         @id @default(uuid()) @db.Uuid
  car_id            String         @db.Uuid
  specifications_id String         @db.Uuid
  created_at        DateTime       @default(now())
  car               cars           @relation(fields: [car_id], references: [id])
  specification     specifications @relation(fields: [specifications_id], references: [id])
}

model car_images {
  id         String   @id @default(uuid())
  car        cars     @relation(fields: [car_id], references: [id])
  car_id     String   @db.Uuid
  image_name String   @db.VarChar
  created_at DateTime @default(now())
}

model rentals {
  id                   String    @id @default(uuid()) @db.Uuid
  car_id               String    @db.Uuid
  car                  cars      @relation(fields: [car_id], references: [id])
  user_id              String    @db.Uuid
  user                 users     @relation(fields: [user_id], references: [id])
  start_date           DateTime  @default(now())
  end_date             DateTime?
  expected_return_date DateTime
  total                Float?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now())
}
